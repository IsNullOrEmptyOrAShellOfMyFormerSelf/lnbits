name: release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:

  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create github release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "$tag" --generate-notes --draft

  docker:
    needs: [ release ]
    uses: ./.github/workflows/docker.yml
    with:
      tag: ${{ github.ref_name }}
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  docker-latest:
    needs: [ release ]
    uses: ./.github/workflows/docker.yml
    with:
      tag: latest
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  pypi:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies for building secp256k1
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake libtool libffi-dev libgmp-dev
      - uses: actions/checkout@v4
      - name: Build and publish to pypi
        uses: JRubics/poetry-publish@v1.15
        with:
          pypi_token: ${{ secrets.PYPI_API_KEY }}

  appimage:
    needs: [ release ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: sudo apt update -y && sudo apt install -y software-properties-common curl git fuse

      - name: Add deadsnakes PPA and install Python 3.9
        run: |
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt install -y python3.9 python3.9-distutils

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3.9 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build AppImage
        run: bash build_appimage.sh

      - name: Upload AppImage
        uses: actions/upload-artifact@v2
        with:
          name: LNbits.AppImage
          path: LNbits*.AppImage

  release-appimage:
    needs: [ appimage ]
    runs-on: ubuntu-latest
    steps:
      - name: Download AppImage
        uses: actions/download-artifact@v2
        with:
          name: LNbits.AppImage
          path: .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./LNbits*.AppImage
          asset_name: LNbits.AppImage
          asset_content_type: application/octet-stream